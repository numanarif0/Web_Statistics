@model List<YokIstatistikWeb.Models.Universite>

@{
ViewData["Title"] = "Üniversite İstatistikleri";

var toplamUni = Model.Count;
var toplamOgretimElemani = Model.Sum(u => u.birimler.Sum(b => b.toplam_toplam ?? 0));
var devletSayisi = Model.Count(u => u.tur.ToUpper() == "DEVLET");
var vakifSayisi = Model.Count(u => u.tur.ToUpper() == "VAKIF");
var vakifMyoSayisi = Model.Count(u => u.tur.ToUpper() == "VAKIF MYO" );
var enBuyuk = Model
.OrderByDescending(u => u.birimler.Sum(b => b.toplam_toplam ?? 0))
.FirstOrDefault();

var modelData = Model.Select(u => new
{
universite = u.universite,
tur = u.tur,
sehir = u.sehir,
toplam = u.birimler.Sum(b => b.toplam_toplam ?? 0)
}).ToList();

var jsonData = System.Text.Json.JsonSerializer.Serialize(modelData);

// Yıl seçenekleri için liste
var yillar = new[] { "2023_2024", "2022_2023", "2021_2022", "2020_2021" };
}

<!-- Google Charts -->
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<!-- BAŞLIK -->
<div class="mb-4">
    <h2>@ViewBag.Yil Yükseköğretim Akademik Personel Verileri</h2>
</div>

@if (TempData["Error"] != null)
{
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    @TempData["Error"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

<!-- BİLGİ KARTLARI -->
<div class="row text-center mb-4">
    <div class="col-md-3 mb-3">
        <div class="stats-card p-3 rounded">
            <div class="stats-title">Toplam Üniversite</div>
            <div class="stats-value">@toplamUni</div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="stats-card p-3 rounded">
            <div class="stats-title">Toplam Öğretim Elemanı</div>
            <div class="stats-value text-success">@toplamOgretimElemani</div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="stats-card p-3 rounded">
            <div class="stats-title">Devlet / Vakıf / Vakıf Myo</div>
            <div class="stats-value text-dark">@devletSayisi Devlet / @vakifSayisi Vakıf / @vakifMyoSayisi Vakıf Myo</div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="stats-card p-3 rounded">
            <div class="stats-title">En Büyük Üniversite</div>
            <div class="text-danger fw-semibold">@enBuyuk?.universite</div>
            <span class="badge bg-danger">@enBuyuk?.birimler.Sum(b => b.toplam_toplam ?? 0) kişi</span>
        </div>
    </div>
</div>
<!-- KARŞILAŞTIRMA FORMU -->
<div class="row mb-4">
    <div class="col-md-5">
        <label class="form-label">1. Üniversite:</label>
        <select id="uni1" class="form-select">
            <option value="">Seçiniz</option>
            @foreach (var uni in Model.OrderBy(x => x.universite))
            {
            <option value="@uni.Id">@uni.universite</option>
            }
        </select>
    </div>
    <div class="col-md-5">
        <label class="form-label">2. Üniversite:</label>
        <select id="uni2" class="form-select">
            <option value="">Seçiniz</option>
            @foreach (var uni in Model.OrderBy(x => x.universite))
            {
            <option value="@uni.Id">@uni.universite</option>
            }
        </select>
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary w-100" onclick="goToCompare()">Karşılaştır</button>
    </div>
</div>

<!-- FİLTRE FORMU -->
<div class="filter-form row mb-4">
    <div class="col-md-4">
        <label class="form-label">Üniversite Adı:</label>
        <input type="text" id="aramaInput" class="form-control" placeholder="Üniversite ara...">
    </div>
    <div class="col-md-4">
        <label class="form-label">Üniversite Türü:</label>
        <select id="turFilter" class="form-select">
            <option value="">Tümü</option>
            <option value="DEVLET">Devlet</option>
            <option value="VAKIF">Vakıf</option>
            <option value="VAKIF MYO">Vakıf MYO</option>
        </select>
    </div>
    <div class="col-md-4">
        <label class="form-label">Şehir:</label>
        <select id="sehirFilter" class="form-select">
            <option value="">Tümü</option>
            @foreach (var sehir in Model.Select(u => u.sehir).Distinct().OrderBy(x => x))
            {
            <option value="@sehir">@sehir</option>
            }
        </select>
    </div>
</div>

<div class="mb-4">
    <button class="btn btn-secondary" onclick="resetFilters()">Filtreleri Sıfırla</button>
</div>

<!-- GRAFİKLER -->
<div class="chart-container">
    <div id="chart_div" style="width: 100%; height: 500px;"></div>
</div>

<div class="chart-container">
    <div id="piechart_div" style="width: 100%; height: 400px;"></div>
</div>

<!-- TABLO -->
<table class="table table-bordered table-striped mt-4" id="uniTable">
    <thead class="table-light">
    <tr>
        <th>Üniversite</th>
        <th>Tür</th>
        <th>Şehir</th>
        <th>Toplam Öğretim Elemanı</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var uni in Model)
    {
    <tr>
        <td>
            <a href="@Url.Action("Detay", "Yuksekogretim", new { id = uni.Id, year = ViewBag.Yil.Replace("-", "_") })">
                @uni.universite
            </a>
        </td>
        <td>@uni.tur</td>
        <td>@uni.sehir</td>
        <td>@uni.birimler.Sum(b => b.toplam_toplam ?? 0)</td>
    </tr>
    }
    </tbody>
</table>

<!-- GRAFİK SCRIPTLERİ -->
<script type="text/javascript">
    const allData = @Html.Raw(jsonData);

    google.charts.load('current', { packages: ['corechart'] });
    google.charts.setOnLoadCallback(drawAll);

    function drawAll() {
        drawChart(allData);
        drawPieChart(allData);
    }

    function drawChart(dataArray) {
        const sorted = [...dataArray]
            .sort((a, b) => b.toplam - a.toplam)
            .slice(0, 10);

        const chartData = [
            ["Üniversite", "Öğretim Elemanı Sayısı"],
            ...sorted.map(u => [u.universite, u.toplam])
        ];

        const data = google.visualization.arrayToDataTable(chartData);

        const options = {
            title: 'En Çok Akademik Personeli Olan 10 Üniversite',
            chartArea: { width: '60%' },
            hAxis: { title: 'Öğretim Elemanı Sayısı', minValue: 0 },
            vAxis: { title: 'Üniversite' }
        };

        const chart = new google.visualization.BarChart(document.getElementById('chart_div'));
        chart.draw(data, options);
    }

    function drawPieChart(dataArray) {
        const counts = {};
        dataArray.forEach(u => {
            const tur = u.tur.toUpperCase();
            counts[tur] = (counts[tur] || 0) + 1;
        });

        const chartData = [
            ["Tür", "Üniversite Sayısı"],
            ...Object.entries(counts)
        ];

        const data = google.visualization.arrayToDataTable(chartData);

        const options = {
            title: 'Üniversite Türlerine Göre Dağılım',
            is3D: true
        };

        const chart = new google.visualization.PieChart(document.getElementById('piechart_div'));
        chart.draw(data, options);
    }

    // Filtreleme
    document.getElementById("turFilter").addEventListener("change", applyFilters);
    document.getElementById("sehirFilter").addEventListener("change", applyFilters);
    document.getElementById("aramaInput").addEventListener("input", applyFilters);

    function applyFilters() {
        const tur = document.getElementById("turFilter").value.toUpperCase();
        const sehir = document.getElementById("sehirFilter").value.toUpperCase();
        const arama = document.getElementById("aramaInput").value.toLowerCase();

        const table = document.getElementById("uniTable").getElementsByTagName("tbody")[0];
        const rows = table.getElementsByTagName("tr");

        const filtered = [];

        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName("td");
            const name = cells[0].innerText.trim();
            const rowTur = cells[1].innerText.trim().toUpperCase();
            const rowSehir = cells[2].innerText.trim().toUpperCase();
            const rowNameLower = name.toLowerCase();

            const turMatch = !tur || rowTur === tur;
            const sehirMatch = !sehir || rowSehir === sehir;
            const aramaMatch = !arama || rowNameLower.includes(arama);

            if (turMatch && sehirMatch && aramaMatch) {
                rows[i].style.display = "";
                const toplam = parseInt(cells[3].textContent);
                filtered.push({ universite: name, tur: rowTur, sehir: rowSehir, toplam });
            } else {
                rows[i].style.display = "none";
            }
        }

        drawChart(filtered);
        drawPieChart(filtered);
    }

    function resetFilters() {
        document.getElementById("turFilter").value = "";
        document.getElementById("sehirFilter").value = "";
        document.getElementById("aramaInput").value = "";

        const rows = document.getElementById("uniTable").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
        for (let i = 0; i < rows.length; i++) {
            rows[i].style.display = "";
        }

        drawChart(allData);
        drawPieChart(allData);
    }
    function goToCompare() {
        const id1 = document.getElementById("uni1").value;
        const id2 = document.getElementById("uni2").value;
        const year = '@ViewBag.Yil'.replace('-', '_');

        if (!id1 || !id2 || id1 === id2) {
            alert("Lütfen farklı iki üniversite seçin.");
            return;
        }

        const url = `/Yuksekogretim/Karsilastir?id1=${encodeURIComponent(id1)}&id2=${encodeURIComponent(id2)}&year=${year}`;
        window.location.href = url;
    }

    function changeYear(year) {
        window.location.href = '/Yuksekogretim?year=' + year;
    }

</script>
